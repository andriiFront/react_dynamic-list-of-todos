{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","userId","selectUser","handleChange","query","selectValue","className","type","name","placeholder","value","onChange","map","todo","key","id","completed","checked","readOnly","title","classnames","onClick","BASE_URL","getUser","fetch","then","res","json","CurrentUser","state","user","this","props","result","setState","data","prevProps","email","phone","React","Component","App","selectedUserId","event","target","prepareTodos","filter","filteredTodos","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c6b530f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\nexport const TodoList = ({\n  todos, userId, selectUser, handleChange, query, selectValue,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <input\n      type=\"text\"\n      name=\"query\"\n      placeholder=\"input a task\"\n      value={query}\n      onChange={handleChange}\n    />\n\n    <select onChange={handleChange} value={selectValue} name=\"selectValue\">\n      <option value=\"\">All</option>\n      <option value=\"active\">Active</option>\n      <option value=\"completed\">Completed</option>\n    </select>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={`TodoList__item TodoList__item--${\n              todo.completed ? '' : 'un'}checked`\n            }\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classnames(\n                'TodoList__user-button',\n                'button',\n                { 'TodoList__user-button--selected': userId === todo.userId },\n              )}\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  userId: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n  selectValue: PropTypes.string.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport const request = () => (\n  fetch(`${BASE_URL}todos`)\n    .then(res => res.json())\n    .then(res => res.data)\n);\n\nexport const getUser = userId => (\n  fetch(`${BASE_URL}users/${userId}`)\n    .then(res => res.json())\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = { user: null };\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then((result) => {\n        this.setState({ user: result.data });\n      });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then((result) => {\n          this.setState({ user: result.data });\n        });\n    }\n  }\n\n  render() {\n    const { userId, selectUser } = this.props;\n\n    if (!this.state.user) {\n      return <h1>Hello</h1>;\n    }\n\n    const { name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          className=\"CurrentUser__user-button button\"\n          type=\"button\"\n          onClick={() => selectUser(0)}\n        >\n          Clear user\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: '',\n    query: '',\n    selectValue: '',\n  };\n\n  componentDidMount() {\n    request()\n      .then(todos => this.setState({\n        todos: todos.filter(todo => todo.title),\n      }));\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  prepareTodos = () => {\n    const { selectValue } = this.state;\n\n    if (selectValue === 'active') {\n      return this.state.todos.filter(\n        todo => !todo.completed,\n      );\n    }\n\n    if (selectValue === 'completed') {\n      return this.state.todos.filter(\n        todo => todo.completed,\n      );\n    }\n\n    return this.state.todos;\n  }\n\n  render() {\n    const { selectedUserId, query, selectValue } = this.state;\n    const filteredTodos = this.prepareTodos().filter(\n      todo => todo.title.includes(this.state.query),\n    );\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodos}\n            userId={selectedUserId}\n            selectUser={this.selectUser}\n            handleChange={this.handleChange}\n            query={query}\n            selectValue={selectValue}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}